{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","serachField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAWeA,EARF,SAAAC,GAAK,OAClB,sBAAKC,UAAU,iBAAf,UAEA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,OACpB,4BAAIN,EAAMI,QAAQG,YCIHC,EAPE,SAAAR,GACb,OAAO,sBAAKC,UAAU,YAAf,mBACHD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAAUA,GAAtBA,EAAQC,WCCbM,G,MANG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACd,uBAAOZ,UAAU,SACjBa,KAAK,SACLF,YAAeA,EACfG,SAAUF,MC8BCG,E,kDA9Bb,aAAc,IAAD,8BACX,gBAWFH,aAAe,SAACI,GAChB,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAXpC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAc,IAJL,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAQ/H,WAAS,IAAD,EACwBC,KAAKN,MAA5Bb,EADD,EACCA,SAASU,EADV,EACUA,YACVU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACA,sBAAK9B,UAAU,MAAf,UACE,cAAC,EAAD,CAAWW,YAAa,kBAAkBC,aAAce,KAAKf,eAC7D,cAAC,EAAD,CAAUJ,SAAYoB,W,GA1BVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8382621f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = props => (\r\n<div className='card-container'>\r\n\r\n<img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n<h2 >{props.monster.name}</h2>\r\n<p>{props.monster.email}</p>\r\n</div>\r\n);\r\nexport default Card;","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport Card from '../card/card.component';\r\n\r\n\r\nconst CardList = props=>{\r\n    return <div className='card-list'>      {\r\n        props.monsters.map(monster =>\r\n        (<Card key={monster.id} monster ={monster}></Card>))\r\n        }</div>\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './serach-box.styles.css';\r\n\r\nconst SearchBox = ({placeholder,handleChange}) => (\r\n    <input className='search' \r\n    type='search' \r\n    placeholder = {placeholder} \r\n    onChange={handleChange}/>\r\n)\r\nexport default SearchBox;","\nimport './App.css';\nimport React ,{Component} from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters : [],\n      serachField : ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = (e) => {\n  this.setState({serachField : e.target.value})\n  };\n\n  \n  render(){\n    const {monsters,serachField}= this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(serachField.toLowerCase())\n    );\n    return(\n    <div className=\"App\">\n      <SearchBox placeholder ='Search Monsters' handleChange={this.handleChange}/>\n      <CardList monsters = {filteredMonsters} />\n    </div>\n    )}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}